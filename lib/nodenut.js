// Generated by CoffeeScript 1.5.0-pre
(function() {
  var NutConnection, NutUPS, debug, net;

  net = require("net");

  debug = function() {};

  exports.setDebug = function() {
    return debug = function(message) {
      return console.log(message);
    };
  };

  NutConnection = (function() {

    function NutConnection(host, port, username, password) {
      this.host = host;
      this.port = port != null ? port : 3493;
      this.username = username != null ? username : null;
      this.password = password != null ? password : null;
    }

    NutConnection.prototype.sendCommand = function(cmd, cb) {
      if (connected !== true) {
        throw new Error("Not Connected");
      } else {
        return this.conn.write(cmd + "\n", function() {
          return this.conn.once("data", function(data) {
            var response;
            response = data;
            debug("CMD: " + cmd + " -> " + response);
            return cb(response);
          });
        });
      }
    };

    NutConnection.prototype.connect = function(cb) {
      var _this = this;
      this.conn = net.createConnection({
        host: this.host,
        port: this.port
      });
      this.conn.setEncoding('ascii');
      return this.conn.on("connect", function() {
        debug("Connected to " + _this.host + ":" + _this.port);
        _this.connected = true;
        if (_this.username != null) {
          debug("Username specified, attempting USERNAME cmd");
          return _this.sendCommand("USERNAME " + _this.username, function(response) {
            if (response !== "OK\n") {
              throw new Error("USERNAME NOT OK");
            } else {
              if (_this.password != null) {
                debug("Password specified, attempting PASSWORD cmd");
                return _this.sendCommand("PASSWORD " + _this.password, function(response) {
                  if (response !== "OK\n") {
                    throw new Error("PASSWORD NOT OK");
                  } else {
                    return cb(_this);
                  }
                });
              } else {
                return cb(_this);
              }
            }
          });
        }
      });
    };

    NutConnection.prototype.version = function(cb) {
      return this.sendCommand("VER", cb);
    };

    NutConnection.prototype.getUpsList = function(cb) {
      return this.sendCommand("LIST UPS", function(response) {
        var line, match, responseLines, result, upsLines;
        responseLines = response.split("\n");
        if (responseLines[0] !== "BEGIN LIST UPS") {
          throw new Error("Unexpected response to LIST UPS");
        }
        if (reponseLines[responseLines.length - 1] !== "END LIST UPS") {
          throw new Error("Unfinished response to LIST UPS");
        } else {
          upsLines = responseLines.pop().shift();
          result = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = upsLines.length; _i < _len; _i++) {
              line = upsLines[_i];
              match = /UPS (.*) "(.*)"/i.exec(line);
              _results.push(new NutUPS(this, match[1], match[2]));
            }
            return _results;
          }).call(this);
          return cb(result);
        }
      });
    };

    NutConnection.prototype.logout = function() {
      this.connected = false;
      return this.conn.end("LOGOUT\n");
    };

    return NutConnection;

  })();

  NutUPS = (function() {

    function NutUPS(connection, upsname, description) {
      this.connection = connection;
      this.upsname = upsname;
      this.description = description;
    }

    NutUPS.prototype.getVars = function(cb) {
      return this.connection.sendCommand("LIST VAR " + this.upsname, function(response) {
        var line, match, responseLines, results, upsLines, _i, _len;
        responseLines = response.split("\n");
        if (responseLines[0] !== ("BEGIN LIST VAR " + this.upsname)) {
          throw new Error("Unexpected response to LIST VAR " + this.upsname);
        }
        if (reponseLines[responseLines.length - 1] !== ("END LIST VAR " + this.upsname)) {
          throw new Error("Unfinished response to LIST VAR " + this.upsname);
        } else {
          upsLines = responseLines.pop().shift();
          results = {};
          for (_i = 0, _len = upsLines.length; _i < _len; _i++) {
            line = upsLines[_i];
            match = new RegExp("VAR " + this.upsname + " (.*) \"(.*)\"", "i").exec(line);
            results[match[1]] = match[2];
          }
          return cb(results);
        }
      });
    };

    NutUPS.prototype.getCommands = function(cb) {
      return this.connection.sendCommand("LIST CMD " + this.upsname, function(response) {
        var line, match, responseLines, results, upsLines;
        responseLines = response.split("\n");
        if (responseLines[0] !== ("BEGIN LIST CMD " + this.upsname)) {
          throw new Error("Unexpected response to LIST CMD " + this.upsname);
        }
        if (reponseLines[responseLines.length - 1] !== ("END LIST CMD " + this.upsname)) {
          throw new Error("Unfinished response to LIST CMD " + this.upsname);
        } else {
          upsLines = responseLines.pop().shift();
          results = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = upsLines.length; _i < _len; _i++) {
              line = upsLines[_i];
              match = new RegExp("VAR " + this.upsname + " (.*)", "i").exec(line);
              _results.push(match[1]);
            }
            return _results;
          }).call(this);
          return cb(results);
        }
      });
    };

    NutUPS.prototype.getRWVars = function(cb) {
      return this.connection.sendCommand("LIST RW " + this.upsname, function(response) {
        var line, match, responseLines, results, upsLines, _i, _len;
        responseLines = response.split("\n");
        if (responseLines[0] !== ("BEGIN LIST RW " + this.upsname)) {
          throw new Error("Unexpected response to LIST RW " + this.upsname);
        }
        if (reponseLines[responseLines.length - 1] !== ("END LIST RW " + this.upsname)) {
          throw new Error("Unfinished response to LIST RW " + this.upsname);
        } else {
          upsLines = responseLines.pop().shift();
          results = {};
          for (_i = 0, _len = upsLines.length; _i < _len; _i++) {
            line = upsLines[_i];
            match = new RegExp("RW " + this.upsname + " (.*) \"(.*)\"", "i").exec(line);
            results[match[1]] = match[2];
          }
          return cb(results);
        }
      });
    };

    NutUPS.prototype.setRWVar = function(rwvar, value, cb) {
      return this.connection.sendCommand("SET VAR " + this.upsname + " " + rwvar + " " + value, function(response) {
        if (response !== "OK\n") {
          throw new Error("Failed to write to rwvar: " + rwvar + " to: " + value + " received: " + response);
        } else {
          return cb();
        }
      });
    };

    NutUPS.prototype.runCommand = function(command, cb) {
      return this.connection.sendCommand("INSTCMD " + this.upsname + " " + command, function(response) {
        if (response !== "OK\n") {
          throw new Error("Failed to instcmd " + command + ": " + response);
        } else {
          return cb();
        }
      });
    };

    return NutUPS;

  })();

  exports.connect = function(host, port, username, password, cb) {
    var connection;
    connection = new NutConnection(host, port, username, password);
    return connection.connect(cb);
  };

}).call(this);
